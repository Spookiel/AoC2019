import networkx as nx
from collections import defaultdict, Counter, deque
data = """.#....#.###.........#..##.###.#.....##...
...........##.......#.#...#...#..#....#..
...#....##..##.......#..........###..#...
....#....####......#..#.#........#.......
...............##..#....#...##..#...#..#.
..#....#....#..#.....#.#......#..#...#...
.....#.#....#.#...##.........#...#.......
#...##.#.#...#.......#....#........#.....
....##........#....#..........#.......#..
..##..........##.....#....#.........#....
...#..##......#..#.#.#...#...............
..#.##.........#...#.#.....#........#....
#.#.#.#......#.#...##...#.........##....#
.#....#..#.....#.#......##.##...#.......#
..#..##.....#..#.........#...##.....#..#.
##.#...#.#.#.#.#.#.........#..#...#.##...
.#.....#......##..#.#..#....#....#####...
........#...##...#.....#.......#....#.#.#
#......#..#..#.#.#....##..#......###.....
............#..#.#.#....#.....##..#......
...#.#.....#..#.......#..#.#............#
.#.#.....#..##.....#..#..............#...
.#.#....##.....#......##..#...#......#...
.......#..........#.###....#.#...##.#....
.....##.#..#.....#.#.#......#...##..#.#..
.#....#...#.#.#.......##.#.........#.#...
##.........#............#.#......#....#..
.#......#.............#.#......#.........
.......#...##........#...##......#....#..
#..#.....#.#...##.#.#......##...#.#..#...
#....##...#.#........#..........##.......
..#.#.....#.....###.#..#.........#......#
......##.#...#.#..#..#.##..............#.
.......##.#..#.#.............#..#.#......
...#....##.##..#..#..#.....#...##.#......
#....#..#.#....#...###...#.#.......#.....
.#..#...#......##.#..#..#........#....#..
..#.##.#...#......###.....#.#........##..
#.##.###.........#...##.....#..#....#.#..
..........#...#..##..#..##....#.........#
..#..#....###..........##..#...#...#..#.."""
#44997

test = """.#..#
.....
#####
....#
...##"""





import math
import sys

# (part1 answer)
G = [i for i in data.splitlines()]

rows = len(G)
cols = len(G[0])

def gcd(x,y):
    return y if x==0 else gcd(y%x, x)

ans = (0,0,0,set())
for r in range(rows):
    for c in range(cols):
        if G[r][c] != '#':
            continue
        seen = set()
        for rr in range(rows):
            for cc in range(cols):
                if G[rr][cc] == '#' and (rr!=r or cc!=c):
                    dr = rr-r
                    dc = cc-c
                    g = gcd(dr,dc)
                    if g < 0:
                        g *= -1
                    seen.add((-dr//g, dc//g))
        if len(seen) > ans[0]:
            ans = (len(seen),r,c,seen)
#2628
ans,r,c,seen = ans
print(ans)
to_sort = []
for (dr, dc) in seen:
    to_check = math.atan2(dr, dc)
    if to_check > math.pi/2.0:
        to_check -= 2.0*math.pi
    to_sort.append((to_check, (dr, dc)))
ans = sorted(to_sort)[::-1]
rans = r-ans[199][1][0]
cans = c+ans[199][1][1]
while G[rans][cans] != "#":
    rans -= ans[199][1][0]
    cans += ans[199][1][1]
print(rans, cans)



